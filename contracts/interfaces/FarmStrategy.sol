// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/**
 * @title FarmStrategy
 * @notice Abstract contract that defines the required interface for any strategy deployed on DexponentProtocol.
 *         All strategy implementations (e.g. Uniswap V3 market-making, lending, etc.) must inherit from this contract.
 *
 * Key responsibilities:
 *  - deployLiquidity: Moves principal funds from the Farm into an external, non-custodial strategy.
 *  - withdrawLiquidity: Retrieves principal funds from the strategy back to the Farm.
 *  - harvestRewards: Harvests yield (in the principal asset) generated by the strategy.
 *
 * Optional hooks:
 *  - rebalance: Adjust positions without a full withdrawal.
 *  - emergencyWithdraw: Forcefully pull all funds back to the Farm in emergencies.
 *
 * Security:
 *  - The contract stores an immutable reference to the associated Farm.
 *  - The `onlyFarm` modifier restricts critical functions to only the associated Farm.
 */
abstract contract FarmStrategy is Ownable, ReentrancyGuard {
    /// @notice The associated Farm contract that interacts with this strategy.
    address public immutable farm;

    /// @notice The principal asset deployed into the strategy (ERC20 token address, or address(0) for native).
    address public asset;

    // -----------------------------
    // Events
    // -----------------------------
    event LiquidityDeployed(uint256 amount);
    event LiquidityWithdrawn(uint256 amount);
    event RewardsHarvested(uint256 amount);
    event StrategyRebalanced();
    event EmergencyWithdrawn(uint256 amount);

    /**
     * @notice Initializes the strategy with the associated Farm and principal asset.
     * @param _farm The address of the Farm contract that will interact with this strategy.
     * @param _asset The address of the principal asset.
     */
    constructor(address _farm, address _asset) {
        require(_farm != address(0), "FarmStrategy: invalid farm address");
        farm = _farm;
        asset = _asset;
    }

    /**
     * @dev Modifier to restrict function execution to only the associated Farm.
     */
    modifier onlyFarm() {
        require(msg.sender == farm, "FarmStrategy: caller is not the associated Farm");
        _;
    }

    // -----------------------------
    // Core Strategy Functions
    // -----------------------------

    /**
     * @notice Deploys a specified amount of principal funds from the Farm into the external strategy.
     * @dev Must be callable only by the associated Farm.
     *      If the principal asset is native (address(0)), this function should be payable.
     * @param amount The amount of the principal asset to deploy.
     */
    function deployLiquidity(uint256 amount) external payable virtual onlyFarm nonReentrant {
        // Your non-custodial deployment logic goes here.
        emit LiquidityDeployed(amount);
    }

    /**
     * @notice Withdraws a specified amount of principal funds from the strategy back to the Farm.
     * @dev Must be callable only by the associated Farm.
     * @param amount The amount of the principal asset to withdraw.
     */
    function withdrawLiquidity(uint256 amount) external virtual onlyFarm nonReentrant {
        // Your withdrawal logic goes here.
        emit LiquidityWithdrawn(amount);
    }

    /**
     * @notice Harvests yield generated by the strategy.
     * @dev Must be callable only by the associated Farm.
     *      The yield should be returned in the principal asset.
     * @return harvested The amount of yield harvested.
     */
    function harvestRewards() external virtual onlyFarm nonReentrant returns (uint256 harvested) {
        // Your yield harvesting logic goes here.
        return harvested;
    }

    /**
     * @notice Internal helper function to send harvested rewards to the Farm.
     * @dev If the principal asset is native, performs a native transfer;
     *      otherwise uses ERC20 transfer.
     * @param amount The amount of rewards (in principal asset) to send.
     */
    function _sendRewardsToFarm(uint256 amount) internal virtual {
        if (asset == address(0)) {
            (bool success, ) = farm.call{value: amount}("");
            require(success, "FarmStrategy: native transfer failed");
        } else {
            require(IERC20(asset).transfer(farm, amount), "FarmStrategy: ERC20 transfer failed");
        }
        emit RewardsHarvested(amount);
    }

    // -----------------------------
    // Optional Lifecycle Hooks
    // -----------------------------

    /**
     * @notice Rebalances the strategyâ€™s positions without requiring a full withdrawal.
     *         Useful for adjusting positions or parameters (e.g., tick ranges in Uniswap V3).
     * @dev Must be callable only by the associated Farm.
     */
    function rebalance() external virtual onlyFarm nonReentrant {
        // Strategy developers can implement rebalancing logic here.
        emit StrategyRebalanced();
    }

    /**
     * @notice Emergency withdraws all funds from the strategy back to the Farm.
     *         Intended for use in emergency scenarios.
     * @dev Must be callable only by the associated Farm.
     */
    function emergencyWithdraw() external virtual onlyFarm nonReentrant {
        uint256 totalWithdrawn = _emergencyWithdrawImpl();
        emit EmergencyWithdrawn(totalWithdrawn);
    }

    /**
     * @dev Internal function to implement the emergency withdrawal logic.
     *      Derived strategies must override this to withdraw all funds.
     * @return totalAssets The total amount of the principal asset withdrawn.
     */
    function _emergencyWithdrawImpl() internal virtual returns (uint256 totalAssets) {
        return 0;
    }

    // -----------------------------
    // Optional Info Functions
    // -----------------------------

    /**
     * @notice Returns the total value locked (TVL) in the strategy, expressed in the principal asset.
     * @return The total TVL.
     */
    function getStrategyTVL() external view virtual returns (uint256) {
        return 0;
    }

    /**
     * @notice Returns the amount of pending rewards in the strategy, expressed in the principal asset.
     * @return pendingRewards The pending reward amount.
     */
    function getPendingRewards() external view virtual returns (uint256) {
        return 0;
    }
}
